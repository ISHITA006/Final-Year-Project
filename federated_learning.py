# -*- coding: utf-8 -*-
"""ChatDoctor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Taz4d3WZjrFZsbn0wo5uj7bYnELbxWiS
"""

import os

path = os.getcwd()
import json
import numpy as np
import random

f = open(path+'/HealthCareMagic-100k.json')
health_data = json.load(f)

######################### NEVER FORGET TO COMMENT THIS OUT #############################
# health_data = health_data[:800]
######################### NEVER FORGET TO COMMENT THIS OUT #############################
cutoff = int(len(health_data)*0.8)
random.shuffle(health_data)
train_health_data = health_data[:cutoff]
test_health_data = health_data[cutoff:]

agent_data_size = int(len(train_health_data)/6)
agent1_data = train_health_data[:agent_data_size]
agent2_data = train_health_data[agent_data_size: 2*agent_data_size]
agent3_data = train_health_data[2*agent_data_size: 3*agent_data_size]
agent4_data = train_health_data[3*agent_data_size: 4*agent_data_size]
agent5_data = train_health_data[4*agent_data_size: 5*agent_data_size]
agent6_data = train_health_data[5*agent_data_size:]

import copy
import logging
from dataclasses import dataclass, field
from typing import Optional, Dict, Sequence

import torch
import transformers
from torch.utils.data import Dataset
from transformers import Trainer

IGNORE_INDEX = -100
DEFAULT_PAD_TOKEN = "[PAD]"
DEFAULT_EOS_TOKEN = "</s>"
DEFAULT_BOS_TOKEN = "</s>"
DEFAULT_UNK_TOKEN = "</s>"
PROMPT_DICT = {
    "prompt_input": (
        "Below is an instruction that describes a task, paired with an input that provides further context. "
        "Write a response that appropriately completes the request.\n\n"
        "### Instruction:\n{instruction}\n\n### Input:\n{input}\n\n### Response:"
    ),
    "prompt_no_input": (
        "Below is an instruction that describes a task. "
        "Write a response that appropriately completes the request.\n\n"
        "### Instruction:\n{instruction}\n\n### Response:"
    ),
}


@dataclass
class ModelArguments:
    model_name_or_path: Optional[str] = field(default="bert-base-uncased")#./Training_Output") #"bert-base-uncased")


@dataclass
class DataArguments:
    data_path: str = field(default=None, metadata={"help": "Path to the training data."})


@dataclass
class TrainingArguments(transformers.TrainingArguments):
    cache_dir: Optional[str] = field(default=None)
    optim: str = field(default="adamw_torch")
    model_max_length: int = field(
        default=512,
        metadata={"help": "Maximum sequence length. Sequences will be right padded (and possibly truncated)."},
    )
    output_dir: str = './Training_Output'
    # logging_dir: str = './Training_Output/logs'
    num_train_epochs: float = 1
    per_device_train_batch_size: int = 14
    gradient_accumulation_steps: int = 8
    save_strategy= "epoch"
    # save_steps: float = 2000
    # save_total_limit: Optional[int] = 1
    learning_rate: float = 2e-6
    weight_decay: float = 0.0
    warmup_ratio: float = 0.03
    lr_scheduler_type = "cosine"
    # logging_steps: float = 1,
    evaluation_strategy="no",
    eval_accumulation_steps=1,
    per_device_eval_batch_size=1

def smart_tokenizer_and_embedding_resize(
    special_tokens_dict: Dict,
    tokenizer: transformers.PreTrainedTokenizer,
    model: transformers.PreTrainedModel,
):
    """Resize tokenizer and embedding.

    Note: This is the unoptimized version that may make your embedding size not be divisible by 64.
    """
    num_new_tokens = tokenizer.add_special_tokens(special_tokens_dict)
    model.resize_token_embeddings(len(tokenizer))

    if num_new_tokens > 0:
        input_embeddings = model.get_input_embeddings().weight.data
        output_embeddings = model.get_output_embeddings().weight.data

        input_embeddings_avg = input_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)
        output_embeddings_avg = output_embeddings[:-num_new_tokens].mean(dim=0, keepdim=True)

        input_embeddings[-num_new_tokens:] = input_embeddings_avg
        output_embeddings[-num_new_tokens:] = output_embeddings_avg


def _tokenize_fn(strings: Sequence[str], tokenizer: transformers.PreTrainedTokenizer) -> Dict:
    """Tokenize a list of strings."""
    tokenized_list = [
        tokenizer(
            text,
            return_tensors="pt",
            padding="longest",
            max_length=tokenizer.model_max_length,
            truncation=True,
        )
        for text in strings
    ]
    input_ids = labels = [tokenized.input_ids[0] for tokenized in tokenized_list]
    input_ids_lens = labels_lens = [
        tokenized.input_ids.ne(tokenizer.pad_token_id).sum().item() for tokenized in tokenized_list
    ]
    return dict(
        input_ids=input_ids,
        labels=labels,
        input_ids_lens=input_ids_lens,
        labels_lens=labels_lens,
    )


def preprocess(
    sources: Sequence[str],
    targets: Sequence[str],
    tokenizer: transformers.PreTrainedTokenizer,
) -> Dict:
    """Preprocess the data by tokenizing."""
    examples = [s + t for s, t in zip(sources, targets)]
    examples_tokenized, sources_tokenized = [_tokenize_fn(strings, tokenizer) for strings in (examples, sources)]
    input_ids = examples_tokenized["input_ids"]
    labels = copy.deepcopy(input_ids)
    for label, source_len in zip(labels, sources_tokenized["input_ids_lens"]):
        label[:source_len] = IGNORE_INDEX
    return dict(input_ids=input_ids, labels=labels)


class SupervisedDataset(Dataset):
    """Dataset for supervised fine-tuning."""

    def __init__(self, data_path: str, tokenizer: transformers.PreTrainedTokenizer, data):
        super(SupervisedDataset, self).__init__()
        logging.warning("Loading data...")
        list_data_dict = data

        logging.warning("Formatting inputs...")
        prompt_input, prompt_no_input = PROMPT_DICT["prompt_input"], PROMPT_DICT["prompt_no_input"]
        sources = [
            prompt_input.format_map(example) if example.get("input", "") != "" else prompt_no_input.format_map(example)
            for example in list_data_dict
        ]
        targets = [f"{example['output']}{tokenizer.eos_token}" for example in list_data_dict]

        logging.warning("Tokenizing inputs... This may take some time...")
        data_dict = preprocess(sources, targets, tokenizer)
        logging.warning("Tokenization complete!")

        self.input_ids = data_dict["input_ids"]
        self.labels = data_dict["labels"]

    def __len__(self):
        return len(self.input_ids)

    def __getitem__(self, i) -> Dict[str, torch.Tensor]:
        return dict(input_ids=self.input_ids[i], labels=self.labels[i])


@dataclass
class DataCollatorForSupervisedDataset(object):
    """Collate examples for supervised fine-tuning."""

    tokenizer: transformers.PreTrainedTokenizer

    def __call__(self, instances: Sequence[Dict]) -> Dict[str, torch.Tensor]:
        input_ids, labels = tuple([instance[key] for instance in instances] for key in ("input_ids", "labels"))
        input_ids = torch.nn.utils.rnn.pad_sequence(
            input_ids, batch_first=True, padding_value=self.tokenizer.pad_token_id
        )
        labels = torch.nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=IGNORE_INDEX)
        return dict(
            input_ids=input_ids,
            labels=labels,
            attention_mask=input_ids.ne(self.tokenizer.pad_token_id),
        )


def make_supervised_data_module(tokenizer: transformers.PreTrainedTokenizer, data_args, dataset) -> Dict:
    """Make dataset and collator for supervised fine-tuning."""

    train_dataset = SupervisedDataset(tokenizer=tokenizer, data_path=data_args.data_path, data=dataset)
    data_collator = DataCollatorForSupervisedDataset(tokenizer=tokenizer)
    return dict(train_dataset=train_dataset, eval_dataset=None, data_collator=data_collator)

def init_global_model_and_tokenizer():
    print("creating global model...")
    parser = transformers.HfArgumentParser((ModelArguments, DataArguments, TrainingArguments))
    model_args, data_args, training_args, remaining = parser.parse_args_into_dataclasses(return_remaining_strings=True)

    model = transformers.AutoModelForCausalLM.from_pretrained(
        model_args.model_name_or_path,
        cache_dir=training_args.cache_dir,
    )

    tokenizer = transformers.AutoTokenizer.from_pretrained(
        model_args.model_name_or_path,
        cache_dir=training_args.cache_dir,
        model_max_length=training_args.model_max_length,
        padding_side="right",
        use_fast=False,
    )
    if tokenizer.pad_token is None:
        smart_tokenizer_and_embedding_resize(
            special_tokens_dict=dict(pad_token=DEFAULT_PAD_TOKEN),
            tokenizer=tokenizer,
            model=model,
        )
    if "llama" in model_args.model_name_or_path:
        tokenizer.add_special_tokens(
            {
                "eos_token": DEFAULT_EOS_TOKEN,
                "bos_token": DEFAULT_BOS_TOKEN,
                "unk_token": DEFAULT_UNK_TOKEN,
            }
        )
    trainer = Trainer(model=model, tokenizer=tokenizer, args=training_args)
    print("creating global model complete!")
    return model, tokenizer, training_args, data_args, trainer


def init_trainer(data, model, tokenizer, training_args, data_args):
    print("Initializing trainer...")
    train_data_module = make_supervised_data_module(tokenizer=tokenizer, data_args=data_args, dataset=data)
    trainer = Trainer(model=model, tokenizer=tokenizer, args=training_args, **train_data_module)
    print("Initializing complete!")
    return trainer
    

def train_one_epoch(trainer):
    print("Training model...")
    trainer.train()
    print("Training complete!")
    # trainer.save_state()
    # trainer.save_model(training_args.output_dir)
    return trainer

def test_global_model(data, model, tokenizer, training_args, data_args):
    print("Testing model...")
    torch.cuda.empty_cache
    data_collator = DataCollatorForSupervisedDataset(tokenizer=tokenizer)
    trainer = Trainer(model=model, tokenizer=tokenizer, data_collator=data_collator, args=training_args)
    test_data = SupervisedDataset(tokenizer=tokenizer, data_path=data_args.data_path, data=data)
    # TODO: fix evaluation metrics
    predictions_blue = trainer.evaluate(eval_dataset=test_data, metric_key_prefix="test_bleu")
    # predictions_rouge = trainer.evaluate(eval_dataset=test_data, metric_key_prefix="test_rouge")
    # predictions_meteor = trainer.evaluate(eval_dataset=test_data, metric_key_prefix="test_meteor")
    test_results = [predictions_blue] #, predictions_rouge, predictions_meteor]
    print("Testing complete!")
    return test_results

############################### BERT MODEL WEIGHTS #############################################

bert_weights = ['bert.embeddings.word_embeddings.weight',
                'bert.embeddings.position_embeddings.weight',
                'bert.embeddings.token_type_embeddings.weight',
                'bert.embeddings.LayerNorm.weight',
                'bert.embeddings.LayerNorm.bias',
                'bert.encoder.layer.0.attention.self.query.weight',
                'bert.encoder.layer.0.attention.self.query.bias',
                'bert.encoder.layer.0.attention.self.key.weight',
                'bert.encoder.layer.0.attention.self.key.bias',
                'bert.encoder.layer.0.attention.self.value.weight',
                'bert.encoder.layer.0.attention.self.value.bias',
                'bert.encoder.layer.0.attention.output.dense.weight',
                'bert.encoder.layer.0.attention.output.dense.bias',
                'bert.encoder.layer.0.attention.output.LayerNorm.weight',
                'bert.encoder.layer.0.attention.output.LayerNorm.bias',
                'bert.encoder.layer.0.intermediate.dense.weight',
                'bert.encoder.layer.0.intermediate.dense.bias',
                'bert.encoder.layer.0.output.dense.weight',
                'bert.encoder.layer.0.output.dense.bias',
                'bert.encoder.layer.0.output.LayerNorm.weight',
                'bert.encoder.layer.0.output.LayerNorm.bias',
                'bert.encoder.layer.1.attention.self.query.weight',
                'bert.encoder.layer.1.attention.self.query.bias',
                'bert.encoder.layer.1.attention.self.key.weight',
                'bert.encoder.layer.1.attention.self.key.bias',
                'bert.encoder.layer.1.attention.self.value.weight',
                'bert.encoder.layer.1.attention.self.value.bias',
                'bert.encoder.layer.1.attention.output.dense.weight',
                'bert.encoder.layer.1.attention.output.dense.bias',
                'bert.encoder.layer.1.attention.output.LayerNorm.weight',
                'bert.encoder.layer.1.attention.output.LayerNorm.bias',
                'bert.encoder.layer.1.intermediate.dense.weight',
                'bert.encoder.layer.1.intermediate.dense.bias',
                'bert.encoder.layer.1.output.dense.weight',
                'bert.encoder.layer.1.output.dense.bias',
                'bert.encoder.layer.1.output.LayerNorm.weight',
                'bert.encoder.layer.1.output.LayerNorm.bias',
                'bert.encoder.layer.2.attention.self.query.weight',
                'bert.encoder.layer.2.attention.self.query.bias',
                'bert.encoder.layer.2.attention.self.key.weight',
                'bert.encoder.layer.2.attention.self.key.bias',
                'bert.encoder.layer.2.attention.self.value.weight',
                'bert.encoder.layer.2.attention.self.value.bias',
                'bert.encoder.layer.2.attention.output.dense.weight',
                'bert.encoder.layer.2.attention.output.dense.bias',
                'bert.encoder.layer.2.attention.output.LayerNorm.weight',
                'bert.encoder.layer.2.attention.output.LayerNorm.bias',
                'bert.encoder.layer.2.intermediate.dense.weight',
                'bert.encoder.layer.2.intermediate.dense.bias',
                'bert.encoder.layer.2.output.dense.weight',
                'bert.encoder.layer.2.output.dense.bias',
                'bert.encoder.layer.2.output.LayerNorm.weight',
                'bert.encoder.layer.2.output.LayerNorm.bias',
                'bert.encoder.layer.3.attention.self.query.weight',
                'bert.encoder.layer.3.attention.self.query.bias',
                'bert.encoder.layer.3.attention.self.key.weight',
                'bert.encoder.layer.3.attention.self.key.bias',
                'bert.encoder.layer.3.attention.self.value.weight',
                'bert.encoder.layer.3.attention.self.value.bias',
                'bert.encoder.layer.3.attention.output.dense.weight',
                'bert.encoder.layer.3.attention.output.dense.bias',
                'bert.encoder.layer.3.attention.output.LayerNorm.weight',
                'bert.encoder.layer.3.attention.output.LayerNorm.bias',
                'bert.encoder.layer.3.intermediate.dense.weight',
                'bert.encoder.layer.3.intermediate.dense.bias',
                'bert.encoder.layer.3.output.dense.weight',
                'bert.encoder.layer.3.output.dense.bias',
                'bert.encoder.layer.3.output.LayerNorm.weight',
                'bert.encoder.layer.3.output.LayerNorm.bias',
                'bert.encoder.layer.4.attention.self.query.weight',
                'bert.encoder.layer.4.attention.self.query.bias',
                'bert.encoder.layer.4.attention.self.key.weight',
                'bert.encoder.layer.4.attention.self.key.bias',
                'bert.encoder.layer.4.attention.self.value.weight',
                'bert.encoder.layer.4.attention.self.value.bias',
                'bert.encoder.layer.4.attention.output.dense.weight',
                'bert.encoder.layer.4.attention.output.dense.bias',
                'bert.encoder.layer.4.attention.output.LayerNorm.weight',
                'bert.encoder.layer.4.attention.output.LayerNorm.bias',
                'bert.encoder.layer.4.intermediate.dense.weight',
                'bert.encoder.layer.4.intermediate.dense.bias',
                'bert.encoder.layer.4.output.dense.weight',
                'bert.encoder.layer.4.output.dense.bias',
                'bert.encoder.layer.4.output.LayerNorm.weight',
                'bert.encoder.layer.4.output.LayerNorm.bias',
                'bert.encoder.layer.5.attention.self.query.weight',
                'bert.encoder.layer.5.attention.self.query.bias',
                'bert.encoder.layer.5.attention.self.key.weight',
                'bert.encoder.layer.5.attention.self.key.bias',
                'bert.encoder.layer.5.attention.self.value.weight',
                'bert.encoder.layer.5.attention.self.value.bias',
                'bert.encoder.layer.5.attention.output.dense.weight',
                'bert.encoder.layer.5.attention.output.dense.bias',
                'bert.encoder.layer.5.attention.output.LayerNorm.weight',
                'bert.encoder.layer.5.attention.output.LayerNorm.bias',
                'bert.encoder.layer.5.intermediate.dense.weight',
                'bert.encoder.layer.5.intermediate.dense.bias',
                'bert.encoder.layer.5.output.dense.weight',
                'bert.encoder.layer.5.output.dense.bias',
                'bert.encoder.layer.5.output.LayerNorm.weight',
                'bert.encoder.layer.5.output.LayerNorm.bias',
                'bert.encoder.layer.6.attention.self.query.weight',
                'bert.encoder.layer.6.attention.self.query.bias',
                'bert.encoder.layer.6.attention.self.key.weight',
                'bert.encoder.layer.6.attention.self.key.bias',
                'bert.encoder.layer.6.attention.self.value.weight',
                'bert.encoder.layer.6.attention.self.value.bias',
                'bert.encoder.layer.6.attention.output.dense.weight',
                'bert.encoder.layer.6.attention.output.dense.bias',
                'bert.encoder.layer.6.attention.output.LayerNorm.weight',
                'bert.encoder.layer.6.attention.output.LayerNorm.bias',
                'bert.encoder.layer.6.intermediate.dense.weight',
                'bert.encoder.layer.6.intermediate.dense.bias',
                'bert.encoder.layer.6.output.dense.weight',
                'bert.encoder.layer.6.output.dense.bias',
                'bert.encoder.layer.6.output.LayerNorm.weight',
                'bert.encoder.layer.6.output.LayerNorm.bias',
                'bert.encoder.layer.7.attention.self.query.weight',
                'bert.encoder.layer.7.attention.self.query.bias',
                'bert.encoder.layer.7.attention.self.key.weight',
                'bert.encoder.layer.7.attention.self.key.bias',
                'bert.encoder.layer.7.attention.self.value.weight',
                'bert.encoder.layer.7.attention.self.value.bias',
                'bert.encoder.layer.7.attention.output.dense.weight',
                'bert.encoder.layer.7.attention.output.dense.bias',
                'bert.encoder.layer.7.attention.output.LayerNorm.weight',
                'bert.encoder.layer.7.attention.output.LayerNorm.bias',
                'bert.encoder.layer.7.intermediate.dense.weight',
                'bert.encoder.layer.7.intermediate.dense.bias',
                'bert.encoder.layer.7.output.dense.weight',
                'bert.encoder.layer.7.output.dense.bias',
                'bert.encoder.layer.7.output.LayerNorm.weight',
                'bert.encoder.layer.7.output.LayerNorm.bias',
                'bert.encoder.layer.8.attention.self.query.weight',
                'bert.encoder.layer.8.attention.self.query.bias',
                'bert.encoder.layer.8.attention.self.key.weight',
                'bert.encoder.layer.8.attention.self.key.bias',
                'bert.encoder.layer.8.attention.self.value.weight',
                'bert.encoder.layer.8.attention.self.value.bias',
                'bert.encoder.layer.8.attention.output.dense.weight',
                'bert.encoder.layer.8.attention.output.dense.bias',
                'bert.encoder.layer.8.attention.output.LayerNorm.weight',
                'bert.encoder.layer.8.attention.output.LayerNorm.bias',
                'bert.encoder.layer.8.intermediate.dense.weight',
                'bert.encoder.layer.8.intermediate.dense.bias',
                'bert.encoder.layer.8.output.dense.weight',
                'bert.encoder.layer.8.output.dense.bias',
                'bert.encoder.layer.8.output.LayerNorm.weight',
                'bert.encoder.layer.8.output.LayerNorm.bias',
                'bert.encoder.layer.9.attention.self.query.weight',
                'bert.encoder.layer.9.attention.self.query.bias',
                'bert.encoder.layer.9.attention.self.key.weight',
                'bert.encoder.layer.9.attention.self.key.bias',
                'bert.encoder.layer.9.attention.self.value.weight',
                'bert.encoder.layer.9.attention.self.value.bias',
                'bert.encoder.layer.9.attention.output.dense.weight',
                'bert.encoder.layer.9.attention.output.dense.bias',
                'bert.encoder.layer.9.attention.output.LayerNorm.weight',
                'bert.encoder.layer.9.attention.output.LayerNorm.bias',
                'bert.encoder.layer.9.intermediate.dense.weight',
                'bert.encoder.layer.9.intermediate.dense.bias',
                'bert.encoder.layer.9.output.dense.weight',
                'bert.encoder.layer.9.output.dense.bias',
                'bert.encoder.layer.9.output.LayerNorm.weight',
                'bert.encoder.layer.9.output.LayerNorm.bias',
                'bert.encoder.layer.10.attention.self.query.weight',
                'bert.encoder.layer.10.attention.self.query.bias',
                'bert.encoder.layer.10.attention.self.key.weight',
                'bert.encoder.layer.10.attention.self.key.bias',
                'bert.encoder.layer.10.attention.self.value.weight',
                'bert.encoder.layer.10.attention.self.value.bias',
                'bert.encoder.layer.10.attention.output.dense.weight',
                'bert.encoder.layer.10.attention.output.dense.bias',
                'bert.encoder.layer.10.attention.output.LayerNorm.weight',
                'bert.encoder.layer.10.attention.output.LayerNorm.bias',
                'bert.encoder.layer.10.intermediate.dense.weight',
                'bert.encoder.layer.10.intermediate.dense.bias',
                'bert.encoder.layer.10.output.dense.weight',
                'bert.encoder.layer.10.output.dense.bias',
                'bert.encoder.layer.10.output.LayerNorm.weight',
                'bert.encoder.layer.10.output.LayerNorm.bias',
                'bert.encoder.layer.11.attention.self.query.weight',
                'bert.encoder.layer.11.attention.self.query.bias',
                'bert.encoder.layer.11.attention.self.key.weight',
                'bert.encoder.layer.11.attention.self.key.bias',
                'bert.encoder.layer.11.attention.self.value.weight',
                'bert.encoder.layer.11.attention.self.value.bias',
                'bert.encoder.layer.11.attention.output.dense.weight',
                'bert.encoder.layer.11.attention.output.dense.bias',
                'bert.encoder.layer.11.attention.output.LayerNorm.weight',
                'bert.encoder.layer.11.attention.output.LayerNorm.bias',
                'bert.encoder.layer.11.intermediate.dense.weight',
                'bert.encoder.layer.11.intermediate.dense.bias',
                'bert.encoder.layer.11.output.dense.weight',
                'bert.encoder.layer.11.output.dense.bias',
                'bert.encoder.layer.11.output.LayerNorm.weight',
                'bert.encoder.layer.11.output.LayerNorm.bias',
                'cls.predictions.bias', 'cls.predictions.transform.dense.weight',
                'cls.predictions.transform.dense.bias',
                'cls.predictions.transform.LayerNorm.weight',
                'cls.predictions.transform.LayerNorm.bias',
                'cls.predictions.decoder.weight',
                'cls.predictions.decoder.bias']

def get_average_weights(bert_weights, trainers):
  state_dict_copy = trainers[0].model.state_dict().copy()
  for parameter in bert_weights:
    averaged = np.average([trainer.model.state_dict()[parameter].cpu() for trainer in trainers], axis=0)
    averaged = torch.from_numpy(averaged)
    state_dict_copy[parameter] = averaged
  return state_dict_copy

def set_average_weights(trainers, averaged_weights):
  for trainer in trainers:
    trainer.model.load_state_dict(averaged_weights)

################################ MAIN FUNCTION #################################################

# step 1 initialize base global model

global_model, global_tokenizer, training_args, data_args, global_trainer = init_global_model_and_tokenizer()

# step 2: send global model to all agents
trainer1 = init_trainer(agent1_data, global_model, global_tokenizer, training_args, data_args)
trainer2 = init_trainer(agent2_data, global_model, global_tokenizer, training_args, data_args)
trainer3 = init_trainer(agent3_data, global_model, global_tokenizer, training_args, data_args)
trainer4 = init_trainer(agent4_data, global_model, global_tokenizer, training_args, data_args)
trainer5 = init_trainer(agent5_data, global_model, global_tokenizer, training_args, data_args)
trainer6 = init_trainer(agent6_data, global_model, global_tokenizer, training_args, data_args)

# step 3: train base global model on all agents' data
trainer1 = train_one_epoch(trainer1)
trainer2 = train_one_epoch(trainer2)
trainer3 = train_one_epoch(trainer3)
trainer4 = train_one_epoch(trainer4)
trainer5 = train_one_epoch(trainer5)
trainer6 = train_one_epoch(trainer6)
trainers =  [trainer1, trainer2, trainer3, trainer4, trainer5, trainer6]
# trainers =  [trainer1, trainer2]

# step 4: federated averaging of weights of all agents' models and assigning it to the global model
averaged_weights = get_average_weights(bert_weights, trainers)
set_average_weights(trainers, averaged_weights)

# step 5: train agent models again
trainer1 = train_one_epoch(trainers[0])
trainer2 = train_one_epoch(trainers[1])
trainer3 = train_one_epoch(trainers[2])
trainer4 = train_one_epoch(trainers[3])
trainer5 = train_one_epoch(trainers[4])
trainer6 = train_one_epoch(trainers[5])
trainers =  [trainer1, trainer2, trainer3, trainer4, trainer5, trainer6]
# trainers =  [trainer1, trainer2]

# step 6: federated averaging of weights of all agents' models and assigning it to the global model
averaged_weights = get_average_weights(bert_weights, trainers)
set_average_weights(trainers, averaged_weights)
global_model.load_state_dict(averaged_weights)

# step 7: test federated avg model on test data
test_results = test_global_model(test_health_data, global_model, global_tokenizer, training_args, data_args)
print("Test results:")
print(test_results)
with open(path+'/Training_Output/federated_test_results.json', 'w') as fout:
    json.dump(test_results, fout)